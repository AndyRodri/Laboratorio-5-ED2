#include <Arduino.h>
#include "driver/ledc.h"
#include "AdafruitIO_WiFi.h"  // Biblioteca para manejar Adafruit IO a través de WiFi

// Credenciales de Adafruit IO
#define IO_USERNAME "tu_usuario"   // Reemplaza con tu nombre de usuario en Adafruit IO
#define IO_KEY "tu_clave"          // Reemplaza con tu clave de Adafruit IO

// Credenciales de WiFi
#define WIFI_SSID "tu_ssid"        // Reemplaza con el nombre de tu red WiFi
#define WIFI_PASS "tu_password"    // Reemplaza con la contraseña de tu red WiFi

// Configurar Adafruit IO usando WiFi
AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);

// Crear "feeds" para enviar datos a Adafruit IO
AdafruitIO_Feed *analog1Canal = io.feed("analog1");      // Canal para el primer potenciómetro
AdafruitIO_Feed *analog2Canal = io.feed("analog2");      // Canal para el segundo potenciómetro
AdafruitIO_Feed *multCanal = io.feed("Multiplication");  // Canal para el resultado de la multiplicación

// Variables para almacenar los valores leídos de los potenciómetros y la multiplicación
int valorPot1 = 0;
int mapPot1 = 0;  // Valor mapeado del potenciómetro 1 para el display
int valorPot2 = 0;
int mapPot2 = 0;  // Valor mapeado del potenciómetro 2 para el display
int multiplication = 0;  // Resultado de la multiplicación

// Definir los pines donde se conectan los potenciómetros
#define pot1 36  // Potenciómetro 1 conectado al pin 36
#define pot2 39  // Potenciómetro 2 conectado al pin 39

// Definir los pines para los segmentos del display de 7 segmentos 1
#define A1 33
#define B1 25
#define C1 26
#define D1 27
#define E1 14
#define F1 12
#define G1 13

// Definir los pines para los segmentos del display de 7 segmentos 2
#define A2 2
#define B2 5
#define C2 18
#define D2 19
#define E2 21
#define F2 22
#define G2 23

// Estructura para manejar el estado del botón de reinicio
struct Boton1 {
  const uint8_t boton_Reset;  // Pin donde se conecta el botón
  bool pressed;  // Estado actual del botón (si está presionado)
  bool lastState;  // Estado anterior del botón
};
Boton1 reset = {34, false, false};  // Inicialización del botón en el pin 34

// Manejo de interrupciones
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

// Función que se ejecuta cuando se detecta la interrupción del botón
void IRAM_ATTR handle_reset() {
  portENTER_CRITICAL_ISR(&mux);  // Bloquear interrupciones anidadas
  reset.pressed = true;          // Marcar que el botón fue presionado
  portEXIT_CRITICAL_ISR(&mux);   // Desbloquear interrupciones anidadas
}

void setup() {
  Serial.begin(115200);  // Iniciar la comunicación serial para depuración

  // Conectar a Adafruit IO
  Serial.print("Connecting to Adafruit IO...");
  io.connect();
  // Esperar hasta que la conexión sea exitosa
  while (io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);  // Espera 500ms entre intentos de conexión
  }
  Serial.println();
  Serial.println(io.statusText());  // Imprimir el estado de la conexión

  // Configurar el pin del botón como entrada con resistencia pull-up interna
  pinMode(reset.boton_Reset, INPUT_PULLUP);
  attachInterrupt(reset.boton_Reset, handle_reset, RISING);  // Asignar la función de interrupción al botón

  // Configurar los pines de los displays como salidas y ponerlos en estado bajo (apagados)
  int displayPins[] = {A1, B1, C1, D1, E1, F1, G1, A2, B2, C2, D2, E2, F2, G2};
  for (int i = 0; i < 14; i++) {
    pinMode(displayPins[i], OUTPUT);  // Configurar cada pin del display como salida
    digitalWrite(displayPins[i], LOW);  // Apagar todos los segmentos del display
  }

  // Configuración de las entradas analógicas (potenciómetros)
  analogSetWidth(12);  // Definir la resolución del ADC (12 bits)
  analogSetAttenuation(ADC_11db);  // Ajustar la atenuación para un rango de lectura más amplio
}

void loop() {
  io.run();  // Mantener la conexión con Adafruit IO activa

  // Leer valores analógicos de los potenciómetros
  valorPot1 = analogRead(pot1);
  mapPot1 = map(valorPot1, 0, 4095, 0, 15);  // Mapear el valor leído del potenciómetro 1 a un rango de 0-15
  valorPot2 = analogRead(pot2);
  mapPot2 = map(valorPot2, 0, 4095, 0, 15);  // Mapear el valor leído del potenciómetro 2 a un rango de 0-15

  // Si el botón fue presionado, enviar datos a Adafruit IO
  if (reset.pressed != reset.lastState) {
    if (reset.pressed) {
      // Multiplicar los valores mapeados de los potenciómetros
      multiplication = mapPot1 * mapPot2;

      // Enviar los valores mapeados y la multiplicación a Adafruit IO
      analog1Canal->save(mapPot1);
      analog2Canal->save(mapPot2);
      multCanal->save(multiplication);

      delay(3000);  // Esperar 3 segundos antes de permitir otro envío
      reset.pressed = false;  // Reiniciar el estado del botón
    }
    reset.lastState = reset.pressed;  // Actualizar el estado anterior del botón
  }

  // Mostrar los valores mapeados en los displays
  displayNumber(mapPot1, true);   // Mostrar el valor del potenciómetro 1 en el primer display
  displayNumber(mapPot2, false);  // Mostrar el valor del potenciómetro 2 en el segundo display

  delay(100);  // Esperar 100ms antes de la siguiente iteración
}

// Función para mostrar un número en el display
void displayNumber(int num, bool isFirstDisplay) {
  int pins[7];
  if (isFirstDisplay) {
    // Asignar los pines del primer display
    int tempPins[] = {A1, B1, C1, D1, E1, F1, G1};
    memcpy(pins, tempPins, 7 * sizeof(int));
  } else {
    // Asignar los pines del segundo display
    int tempPins[] = {A2, B2, C2, D2, E2, F2, G2};
    memcpy(pins, tempPins, 7 * sizeof(int));
  }

  // Tabla para los segmentos de cada dígito hexadecimal (0-15)
  bool segments[16][7] = {
      {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, LOW},  // 0
      {LOW, HIGH, HIGH, LOW, LOW, LOW, LOW},      // 1
      {HIGH, HIGH, LOW, HIGH, HIGH, LOW, HIGH},   // 2
      {HIGH, HIGH, HIGH, HIGH, LOW, LOW, HIGH},   // 3
      {LOW, HIGH, HIGH, LOW, LOW, HIGH, HIGH},    // 4
      {HIGH, LOW, HIGH, HIGH, LOW, HIGH, HIGH},   // 5
      {HIGH, LOW, HIGH, HIGH, HIGH, HIGH, HIGH},  // 6
      {HIGH, HIGH, HIGH, LOW, LOW, LOW, LOW},     // 7
      {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH}, // 8
      {HIGH, HIGH, HIGH, HIGH, LOW, HIGH, HIGH},  // 9
      {HIGH, HIGH, HIGH, LOW, HIGH, HIGH, HIGH},  // A (10)
      {LOW, LOW, HIGH, HIGH, HIGH, HIGH, HIGH},   // B (11)
      {HIGH, LOW, LOW, HIGH, HIGH, HIGH, LOW},    // C (12)
      {LOW, HIGH, HIGH, HIGH, HIGH, LOW, HIGH},   // D (13)
      {HIGH, LOW, LOW, HIGH, HIGH, HIGH, HIGH},   // E (14)
      {HIGH, LOW, LOW, LOW, HIGH, HIGH, HIGH}     // F (15)
  };

  // Configurar los segmentos del display para mostrar el número deseado
  for (int i = 0; i < 7; i++) {
    digitalWrite(pins[i], segments[num][i]);
  }
}
